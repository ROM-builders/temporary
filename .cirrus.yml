env:
    CIRRUS_CLONE_DEPTH: 1
    BUILD_HOSTNAME: "cirrus-ci.org"
    bot_api: "ENCRYPTED[b16032643ad0994cda4822c9d477956f434278d0f786f8e131b585aa4f8510a11f3cd9f6a66a63568d2cba1c4dde25b4]"

task:
  name: Test
  skip: $CIRRUS_BRANCH == 'main'
  only_if: $CIRRUS_REPO_OWNER == 'ROM-builders'
  timeout_in: 2m
  persistent_worker:
    labels:
      name: AX61-2
    isolation:
      container:
        image: apon77/aosp:cirrus
        cpu: 2
        memory: 4G

  env_script:
    - env
  show_script:
    - cat $CIRRUS_WORKING_DIR/build_rom.sh
  notify_script:
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - your_telegram_id=@ROM_builders_junk
    - show=$(cat $CIRRUS_WORKING_DIR/build_rom.sh)
    - curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" -d "text=<code>$device-$rom_name</code> Started
      
      https://cirrus-ci.com/build/$CIRRUS_BUILD_ID
      
      $show" -d "chat_id=${your_telegram_id}" -d "parse_mode=HTML"
  test_script:
    - set -e
    - curl -Ls https://raw.githubusercontent.com/ROM-builders/temporary/main/test.sh | bash

task:
  name: Build
  skip: $CIRRUS_BRANCH == 'main'
  only_if: $CIRRUS_REPO_OWNER == 'ROM-builders'
  depends_on:
    - Test
  timeout_in: 4h
  persistent_worker:
    labels:
      name: AX61-1
    isolation:
      container:
        image: apon77/aosp:cirrus
        cpu: 24
        memory: 120G
        volumes:
          - /home/cirrus/roms:/home/cirrus/roms
          - /home/cirrus/ccache:/home/cirrus/ccache
          - /home/cirrus/.config:/home/cirrus/.config

  show_script:
    - cat $CIRRUS_WORKING_DIR/build_rom.sh
  test_script:
    - set -e
    - curl -Ls https://raw.githubusercontent.com/ROM-builders/temporary/main/test.sh | bash
  sync_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - mkdir -p ~/roms/$rom_name
    - cd ~/roms/$rom_name
    - rm -rf .repo/local_manifests
    - command=$(head $CIRRUS_WORKING_DIR/build_rom.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build_rom.sh -n | cut -f1 -d:) - 1))
    - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build_rom.sh)
    - bash -c "$command" || true
    
    - set -exv
    - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/sync.log
    - a=$(grep 'Cannot remove project' sync.log -m1|| true)
    - b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
    - c=$(grep 'repo sync has finished' sync.log -m1 || true)
    - d=$(grep 'Failing repos:' sync.log -n -m1 || true)
    - e=$(grep 'fatal: Unable' sync.log || true)
    - f=$(grep 'error.GitError' sync.log || true)
    - g=$(grep 'error: Cannot checkout' sync.log || true)
    - if [[ $a == *'Cannot remove project'* ]]
    - then
    - a=$(echo $a | cut -d ':' -f2 | tr -d ' ')
    - rm -rf $a
    - fi
    - if [[ $b == *'remove-project element specifies non-existent'* ]]
    - then exit 1
    - fi
    - if [[ $d == *'Failing repos:'* ]]
    - then
    - d=$(expr $(grep 'Failing repos:' sync.log -n -m 1| cut -d ':' -f1) + 1)
    - d2=$(expr $(grep 'Try re-running' sync.log -n -m1 | cut -d ':' -f1) - 1 )
    - fail_paths=$(head -n $d2 sync.log | tail -n +$d)
    - for path in $fail_paths
    - do
    - rm -rf $path
    - aa=$(echo $path|awk -F '/' '{print $NF}')
    - rm -rf .repo/project-objects/*$aa.git
    - rm -rf .repo/projects/$path.git
    - done
    - fi
    - if [[ $e == *'fatal: Unable'* ]]
    - then
    - fail_paths=$(grep 'fatal: Unable' sync.log | cut -d ':' -f2 | cut -d "'" -f2)
    - for path in $fail_paths
    - do
    - rm -rf $path
    - aa=$(echo $path|awk -F '/' '{print $NF}')
    - rm -rf .repo/project-objects/*$aa.git
    - rm -rf .repo/project-objects/$path.git
    - rm -rf .repo/projects/$path.git
    - done
    - fi
    - if [[ $f == *'error.GitError'* ]]
    - then
    - rm -rf $(grep 'error.GitError' sync.log | cut -d ' ' -f2)
    - fi
    - if [[ $g == *'error: Cannot checkout'* ]]
    - then
    - coerr=$(grep 'error: Cannot checkout' sync.log | cut -d ' ' -f 4| tr -d ':')
    - for i in $coerr
    - do
    - rm -rf .repo/project-objects/$i.git
    - done
    - fi
    #- (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")

    - if [[ $c == *'repo sync has finished'* ]]
    - then true
    - else
    - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
    - fi

    - rm -rf sync.log

  build_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - cd ~/roms/$rom_name
    - export CCACHE_DIR=~/ccache/$rom_name/$device
    - export CCACHE_EXEC=$(which ccache)
    - export USE_CCACHE=1
    - ccache -M 8G
    - ccache -z
    - ls device/*/*/vendorsetup.sh | grep -v generic && echo "Please remove vendorsetup.sh file from device tree, use local manifest for cloning and removing repositories." && exit 1 || true
    - command=$(tail $CIRRUS_WORKING_DIR/build_rom.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build_rom.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v 'rclone copy')
    - bash -c "$command"

  ccache_stats_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - export CCACHE_DIR=~/ccache/$rom_name/$device
    - ccache -s

  upload_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - cd ~/roms/$rom_name
    - engzip=$(ls out/target/product/$device/*-eng*.zip | grep -v "retrofit" || true)
    - otazip=$(ls out/target/product/$device/*-ota-*.zip | grep -v "hentai" | grep -v "evolution" | grep -v "retrofit" || true)
    - awaken=$(ls out/target/product/$device/Project-Awaken*.zip || true)
    - octavi=$(ls out/target/product/$device/OctaviOS-R*.zip || true)
    - p404=$(ls out/target/product/$device/?.*zip || true)
    - cipher=$(ls out/target/product/$device/CipherOS-*-OTA-*.zip || true)
    - rm -rf $engzip $otazip $awaken $octavi $p404 $cipher
    - dlink=$(basename out/target/product/$device/*.zip)
    - command=$(grep 'rclone copy' $CIRRUS_WORKING_DIR/build_rom.sh)
    - if [[ $device == jasmine_sprout ]]; then command="rclone copy out/target/product/jasmine_sprout/*zip cirrus:jasmine_sprout -P"; fi
    - if [[ $device == laurel_sprout ]]; then command="rclone copy out/target/product/laurel_sprout/*zip cirrus:laurel_sprout -P"; fi
    - if [[ $device == GM8_sprout ]]; then command="rclone copy out/target/product/GM8_sprout/*zip cirrus:GM8_sprout -P"; fi
    - if [[ $device == maple_dsds ]]; then command="rclone copy out/target/product/maple_dsds/*zip cirrus:maple_dsds -P"; fi
    - bash -c "$command"
    - echo "Download link https://roms.cirrus-ci.workers.dev/0:/$device/$dlink"

  remove_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - cd ~/roms/$rom_name
    - rm -rf out/target/product/$device

task:
  name: Post Build
  skip: $CIRRUS_BRANCH == 'main'
  only_if: $CIRRUS_REPO_OWNER == 'ROM-builders'
  skip_notifications: true
  depends_on:
    - Build
  timeout_in: 2m
  persistent_worker:
    labels:
      name: AX61-2
    isolation:
      container:
        image: apon77/aosp:cirrus
        cpu: 2
        memory: 4G

  post_build_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - your_telegram_id=@ROM_builders_channel
    - curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" -d "text=<code>$device-$rom_name</code> Succeed
      
      https://cirrus-ci.com/build/$CIRRUS_BUILD_ID" -d "chat_id=${your_telegram_id}" -d "parse_mode=HTML"
